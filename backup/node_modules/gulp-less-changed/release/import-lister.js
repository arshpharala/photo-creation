"use strict";
/* istanbul ignore next */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* istanbul ignore next */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var bluebird = require("bluebird");
var fs = require("fs");
var less = require("less");
var assign = require("object-assign");
var streamToArray = require("stream-to-array");
var data_uri_visitor_plugin_1 = require("./data-uri-visitor-plugin");
var path_resolver_1 = require("./path-resolver");
var fsAsync = bluebird.promisifyAll(fs);
var ImportLister = (function () {
    function ImportLister(lessOptions) {
        this.lessOptions = lessOptions;
        this.pathResolver = new path_resolver_1.PathResolver();
    }
    ImportLister.prototype.listImports = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var files, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!file) {
                            return [2, []];
                        }
                        _a = this.getExistingFiles;
                        return [4, this.listImportsInternal(file)];
                    case 1: return [4, _a.apply(this, [_b.sent()])];
                    case 2:
                        files = _b.sent();
                        return [2, files.map(function (i) { return ({ path: i.path, time: i.stat.mtime.getTime() }); })];
                }
            });
        });
    };
    ImportLister.prototype.getLessData = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var parts, buffers, _i, parts_1, part;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (file.isBuffer()) {
                            return [2, file.contents.toString()];
                        }
                        return [4, streamToArray(file.contents)];
                    case 1:
                        parts = _a.sent();
                        buffers = [];
                        for (_i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
                            part = parts_1[_i];
                            buffers.push(Buffer.from(part));
                        }
                        return [2, Buffer.concat(buffers).toString()];
                }
            });
        });
    };
    ImportLister.prototype.resolveImportPaths = function (additionalPaths, imports) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, Promise.all(imports.map(function (i) {
                        return _this.pathResolver.resolve(i.directory, i.relativePath, additionalPaths);
                    }))];
            });
        });
    };
    ImportLister.prototype.getLessOptionsForImportListing = function (file, plugin) {
        var options = assign({ filename: file.path }, this.lessOptions);
        options.plugins = options.plugins
            ? [plugin].concat(options.plugins) : [plugin];
        return options;
    };
    ImportLister.prototype.listImportsInternal = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var pluginImports, dataUriVisitorPlugin, options, lessData, renderResult, dataUriImports, reason_1, error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (file == null || file.isNull()) {
                            console.error("Trying to process imports for null file.");
                            return [2, []];
                        }
                        pluginImports = [];
                        dataUriVisitorPlugin = new data_uri_visitor_plugin_1.DataUriVisitorPlugin(function (i) { return pluginImports.push(i); });
                        options = this.getLessOptionsForImportListing(file, dataUriVisitorPlugin);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        return [4, this.getLessData(file)];
                    case 2:
                        lessData = _a.sent();
                        return [4, less.render(lessData, options)];
                    case 3:
                        renderResult = _a.sent();
                        return [4, this.resolveImportPaths(options.paths, pluginImports)];
                    case 4:
                        dataUriImports = _a.sent();
                        return [2, renderResult.imports.concat(dataUriImports)];
                    case 5:
                        reason_1 = _a.sent();
                        error = "Failed to process imports for '" + file.path + "': " + reason_1;
                        console.error(error);
                        throw new Error(error);
                    case 6: return [2];
                }
            });
        });
    };
    ImportLister.prototype.getFileStatsIfExists = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var stat, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, fsAsync.statAsync(file)];
                    case 1:
                        stat = _a.sent();
                        return [2, { path: file, stat: stat }];
                    case 2:
                        error_1 = _a.sent();
                        if (error_1.code === "ENOENT") {
                            console.error("Import '" + file + "' not found.");
                            return [2, null];
                        }
                        throw error_1;
                    case 3: return [2];
                }
            });
        });
    };
    ImportLister.prototype.getExistingFiles = function (files) {
        return __awaiter(this, void 0, void 0, function () {
            var results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, Promise.all(files.map(this.getFileStatsIfExists))];
                    case 1:
                        results = _a.sent();
                        return [2, results.filter(function (info) { return !!info && !!info.stat; })];
                }
            });
        });
    };
    return ImportLister;
}());
exports.ImportLister = ImportLister;

//# sourceMappingURL=import-lister.js.map
