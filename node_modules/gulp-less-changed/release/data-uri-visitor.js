"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var DataUriVisitor = (function () {
    function DataUriVisitor(less, addImport) {
        this.addImport = addImport;
        this.isReplacing = false;
        this.isPreEvalVisitor = true;
        this.visitor = new less.visitors.Visitor(this);
    }
    DataUriVisitor.prototype.run = function (root) {
        return this.visitor.visit(root);
    };
    DataUriVisitor.prototype.visitCall = function (callNode) {
        var _a = this.getImportInfo(callNode), ruleNode = _a.ruleNode, importedFile = _a.importedFile, filePath = _a.filePath;
        if (!importedFile) {
            return ruleNode;
        }
        this.addImport({
            directory: filePath ? path.normalize(filePath) : "",
            relativePath: importedFile
        });
        return ruleNode;
    };
    DataUriVisitor.prototype.tryGetImportedFileName = function (ruleNode) {
        var fileName = ruleNode.args.length === 2 ? ruleNode.args[1] : ruleNode.args[0];
        if (!fileName.value || /@/.test(fileName.value)) {
            return null;
        }
        return fileName.value;
    };
    DataUriVisitor.prototype.getImportInfo = function (ruleNode) {
        if (ruleNode.name !== "data-uri" || ruleNode.args.length === 0) {
            return { ruleNode: ruleNode };
        }
        var importedFile = this.tryGetImportedFileName(ruleNode);
        if (!importedFile) {
            return { ruleNode: ruleNode };
        }
        var fileInfo = typeof ruleNode.fileInfo === "function"
            ? ruleNode.fileInfo()
            : ruleNode.currentFileInfo;
        var filePath = fileInfo.currentDirectory;
        return { ruleNode: ruleNode, importedFile: importedFile, filePath: filePath };
    };
    return DataUriVisitor;
}());
exports.DataUriVisitor = DataUriVisitor;

//# sourceMappingURL=data-uri-visitor.js.map
