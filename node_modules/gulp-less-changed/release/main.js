"use strict";
/* istanbul ignore next */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* istanbul ignore next */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var bluebird = require("bluebird");
var crypto = require("crypto");
var fs = require("fs");
var PluginError = require("plugin-error");
var replaceExtension = require("replace-ext");
var through = require("through2");
var import_buffer_1 = require("./import-buffer");
var import_lister_1 = require("./import-lister");
var fsAsync = bluebird.promisifyAll(fs);
var MODULE_NAME = "gulp-less-changed";
var ImportChecker = (function () {
    function ImportChecker(options, importBuffer) {
        this.importBuffer = importBuffer;
        this.getOutputFileName =
            options.getOutputFileName || (function (input) { return replaceExtension(input, ".css"); });
    }
    ImportChecker.prototype.checkFileForChanges = function (transform, file, enc, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var changed, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (file.isNull()) {
                            callback(null, null);
                            return [2];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4, this.hasFileOrDependenciesChanged(file, this.getOutputFileName(file.path))];
                    case 2:
                        changed = _a.sent();
                        if (changed) {
                            transform.push(file);
                        }
                        return [3, 5];
                    case 3:
                        error_1 = _a.sent();
                        transform.emit("error", new PluginError(MODULE_NAME, "Error processing '" + file.path + "': " + error_1));
                        return [3, 5];
                    case 4:
                        callback(null, null);
                        return [7];
                    case 5: return [2];
                }
            });
        });
    };
    ImportChecker.prototype.checkImportsHaveChanged = function (file, mainFileDate) {
        return __awaiter(this, void 0, void 0, function () {
            function importHasChanged(importFile) {
                return importFile.time > mainFileDate.getTime();
            }
            var imports, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this.importBuffer.listImports(file)];
                    case 1:
                        imports = _a.sent();
                        return [2, imports.some(importHasChanged)];
                    case 2:
                        error_2 = _a.sent();
                        console.error(error_2);
                        return [2, true];
                    case 3: return [2];
                }
            });
        });
    };
    ImportChecker.prototype.hasFileChanged = function (inputFile, outputFilePath) {
        return __awaiter(this, void 0, void 0, function () {
            var stats, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, fsAsync.statAsync(outputFilePath)];
                    case 1:
                        stats = _a.sent();
                        return [2, {
                                hasFileChanged: stats.mtime < inputFile.stat.mtime,
                                modifiedTime: stats.mtime,
                            }];
                    case 2:
                        error_3 = _a.sent();
                        if (error_3.code === "ENOENT") {
                            return [2, { modifiedTime: undefined, hasFileChanged: true }];
                        }
                        else {
                            throw error_3;
                        }
                        return [3, 3];
                    case 3: return [2];
                }
            });
        });
    };
    ImportChecker.prototype.hasFileOrDependenciesChanged = function (inputFile, outputFilePath) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, modifiedTime, hasFileChanged;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.hasFileChanged(inputFile, outputFilePath)];
                    case 1:
                        _a = _b.sent(), modifiedTime = _a.modifiedTime, hasFileChanged = _a.hasFileChanged;
                        if (hasFileChanged) {
                            return [2, true];
                        }
                        return [2, this.checkImportsHaveChanged(inputFile, modifiedTime)];
                }
            });
        });
    };
    return ImportChecker;
}());
function run(options) {
    options = options || {};
    var importLister = new import_lister_1.ImportLister(options);
    var instanceKey = crypto
        .createHash("md5")
        .update(__dirname + JSON.stringify(options))
        .digest("hex");
    var bufferKey = MODULE_NAME + "-" + instanceKey;
    var importBuffer = new import_buffer_1.ImportBuffer(importLister.listImports.bind(importLister), bufferKey);
    var importChecker = new ImportChecker(options, importBuffer);
    return through.obj(function (file, enc, callback) {
        importChecker.checkFileForChanges(this, file, enc, callback);
    });
}
module.exports = run;

//# sourceMappingURL=main.js.map
